import sys
import math
from collections import deque
from six import StringIO
from decimal import Decimal
from ordertree import OrderTree


class OrderBook(object):
    def __init__(self,tick_size=0.0001):
        self.tape=deque(maxlen=None)
        self.bids=OrderTree()
        self.asks=OrderTree()
        self.last_tick=None
        self.last_timestamp=0
        self.tick_size=tick_size
        self.time=0
        self.next_order_id=0

    def update_time(self):
        self.time+=1

    def process_order(self,quote,from_date,verbose):
        order_type=quote['type']
        order_in_book=None
        if from_data:
            self.time=quote['timestamp']
            print(self.time)

        else:
            self.update_time()
            quote['timestamp']=self.time
        if quote['quantity']<=0:
            sys.exit('process_order() given order of quantity<=0')
        if not from_data:
            self.next_order_id+=1
        if order_type=='market':
            trades=self.process_market_order(quote,verbose)
        elif order_type=='limit':
            quote['price']=Decimal(quote['price'])
            trades,order_in_book=self.process_limit_order(quote,from_data,verbose)
        else:
            sys.exit("order_type for process_order() is neither 'market' or 'limit'")

        return trades,order_in_book

    def process_order_list(self,side,order_list,quantity_still_to_trade,quote,verbose):
        trades=[]
        quantity_to_trade=quantity.still_to_trade
        while len(order_list)>0 and quantity_to_trade>0:
            head_order=order_list.get_head_order()
            traded_price=head_order.price
            counter_party=head_order.trade_id
            new_book_quantity=None
            if quantity_to_trade<head_order.quantity:
                traded_quantity=quantity_to_trade
                new_book_quantity=None
                if quantity_to_trade<head_order.quantity:
                    trade_quantity=quantity_to_trade
                    new_book_quantity=head_order.quantity_quantity_to-trade_quantity
                    head_order.update_quantity(new_book_quantity,head_order.timestamp)
                    quantity_to_trade=0
            elif quantity_to_trade==head_order.quantity:
                traded_quantity=quantity_to_trade
                if side=='bid':
                    self.bids.remove_order_by_id(head_order.order_id)
                else:
                    self.asks.remove_order_by_id(head_order.order_id)
                quantity_to_trade=0

            else:
                traded_quantity=head_order.quantity
                if side=='bid':
                    self.bids.remove_order_by_id(head_order.order_id)
                else:
                    self.asks.remove_order_by_id(head_order.order_id)
                quantity_to_trade-=traded_quantity

            if verbose:
                print(("TRADE:Time-{},price-{},quantity-{},tradeID-{},Matching TradeID-{}".format(self.time,traded_price,traded_quantity
                                                                                                  )))
            transaction_record=


    def process_market_order(self,quote,verbose):

    def process_limit_order(self,quote,from_data,verbose):
        order_in_book=None
        trades=[]
        quantity_to_trade=quote['quantity']
        side=quote['side']
        price=quote['price']
        if side=='bid':
            while(self.asks and price>=self.asks.min_price() and quantity_to_trade>0):
                best_price_asks=self.asks.min_price_list()
                quantity_to_trade, new_trades=self.process_order_list('ask',best_price_asks,quantity_to_trade,quote,verbose)
                trades+=new_trades
            if quantity_to_trade>0:
                if not from_data:
                    quote['order_id']=self.next_order_id
                    quote['quantity']=quantity_to_trade
                    self.bids.insert_order(quote)
                    order_in_book=quote

        elif side=='ask':
                while(self.bids and price<=self.bids.max_price() and quantity_to_trade>0):
                    best_price_bids=self.bids.max_price_list()
                    quantity_to_trade,new_trades=self.process_order_list('bid',best_price_bids,quantity_to_trade,verbose)
                    trades+=new_trades
                if quantity_to_trade>0:
                    if not fom_data:
                        quote['order_id']=self.next_order_id
                    quote['quantity']=quantity_to_trade
                    self.asks.insert_order(quote)
                    order_in_book=quote

    def cancel_order(self,side,order_id,time=None):

    def modify_order(self,order_id,order_update,time=None):

    def get_volume_at_price(self,side,price):

    def get_best_bid(self):
        return self.bids.max_price()

    def get_worst_bid(self):
        return self.bids.min_price()

    def get_best_ask(self):
        return self.asks.min_price()
        
    def get_worst_ask(self):
        return self.asks.max_price()
        
    def tape_dump(self,filename,filenode,tapenode):

    def __str__(self):

